// Removed backup file for Ephemeral Chat page per requirements.

// screens/ephemeral_chat_screen.dart
import 'dart:html' as html;
import 'dart:js' as js;
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:provider/provider.dart';
import 'package:share_plus/share_plus.dart';

import '../providers/ephemeral_chat_provider.dart';
import '../models/chat_message.dart';

class EphemeralChatScreen extends StatefulWidget {
  // Ephemeral Chat backup screen removed. This backup file is intentionally blank.
      case ConnectionStatus.disconnected:
        color = Colors.grey;
        text = 'Disconnected';
        break;
      case ConnectionStatus.connecting:
        color = Colors.orange;
        text = 'Connecting...';
        break;
      case ConnectionStatus.connected:
        color = Colors.green;
        text = 'Connected';
        break;
      case ConnectionStatus.error:
        color = Colors.red;
        text = 'Connection Error';
        break;
    }
    
    return Row(
      children: [
        Container(
          width: 12,
          height: 12,
          decoration: BoxDecoration(
            color: color,
            shape: BoxShape.circle,
          ),
        ),
        const SizedBox(width: 4),
        Text(text, style: TextStyle(color: color)),
      ],
    );
  }
  
  Widget _buildMessageItem(ChatMessage message) {
    final bool isSystem = message.type == 'system';
    final bool isSelf = message.clientId == 'self';
    
    if (isSystem) {
      // System message
      return Container(
        alignment: Alignment.center,
        padding: const EdgeInsets.symmetric(vertical: 8.0),
        child: Container(
          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
          decoration: BoxDecoration(
            color: Colors.grey[300],
            borderRadius: BorderRadius.circular(12),
          ),
          child: Text(
            message.message,
            style: TextStyle(color: Colors.grey[800], fontSize: 12),
          ),
        ),
      );
    }
    
    // User message
    return Align(
      alignment: isSelf ? Alignment.centerRight : Alignment.centerLeft,
      child: Container(
        margin: const EdgeInsets.symmetric(horizontal: 8.0, vertical: 4.0),
        padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 10.0),
        decoration: BoxDecoration(
          color: isSelf ? Colors.blue[100] : Colors.grey[100],
          borderRadius: BorderRadius.circular(18),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Sender name
            if (!isSelf && message.sender != null)
              Text(
                message.sender!,
                style: const TextStyle(
                  fontWeight: FontWeight.bold,
                  fontSize: 12,
                ),
              ),
            // Message content
            Text(message.message),
          ],
        ),
      ),
    );
  }
  
  Widget _buildConnectDialog(BuildContext context) {
    // Create a controller for the session ID field
    final TextEditingController sessionIdController = TextEditingController(
      text: Provider.of<EphemeralChatProvider>(context, listen: false).sessionId
    );
    
    return AlertDialog(
      title: const Text('Join Ephemeral Chat'),
      content: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          TextField(
            controller: _usernameController,
            decoration: const InputDecoration(
              labelText: 'Your Name',
              hintText: 'Enter your name',
              prefixIcon: Icon(Icons.person),
            ),
          ),
          const SizedBox(height: 8),
          TextField(
            controller: sessionIdController,
            decoration: const InputDecoration(
              labelText: 'Session ID (optional)',
              hintText: 'Enter session ID to join',
              prefixIcon: Icon(Icons.meeting_room),
              helperText: 'Leave blank to create a new room',
            ),
          ),
          const SizedBox(height: 16),
          const Text(
            'This chat is ephemeral - all messages will be lost when everyone leaves.',
            style: TextStyle(fontSize: 12, color: Colors.grey),
          ),
          const SizedBox(height: 8),
          ElevatedButton.icon(
            icon: const Icon(Icons.bug_report),
            label: const Text('Direct Join (Fallback)'),
            onPressed: () {
              try {
                print("=== Using direct join fallback ===");
                final sessionId = sessionIdController.text;
                
                // Call JavaScript directly using our debug function
                js.context.callMethod('eval', [
                  'window.directJoinChat("${sessionId.isNotEmpty ? sessionId : ""}")'
                ]);
                
                // Close the dialog regardless of result
                Navigator.pop(context);
                setState(() => _showConnectDialog = false);
              } catch (e) {
                print("ERROR in direct join fallback: $e");
              }
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.orange,
              foregroundColor: Colors.white,
            ),
          ),
        ],
      ),
      actions: [
        TextButton(
          child: const Text('Cancel'),
          onPressed: () {
            Navigator.pop(context);
          },
        ),
        ElevatedButton(
          child: const Text('Join Chat'),
          onPressed: () {
            try {
              print('=== Join button clicked ===');
              final provider = Provider.of<EphemeralChatProvider>(context, listen: false);
              
              // Set the username
              final username = _usernameController.text.isNotEmpty ? _usernameController.text : 'Guest';
              provider.setUsername(username);
              print('Username set: $username');
              
              // Use provided session ID or generate new one
              if (sessionIdController.text.isNotEmpty) {
                provider.setSessionId(sessionIdController.text);
                print('Using provided session ID: ${sessionIdController.text}');
              } else {
                print('Generating new session ID...');
                provider.generateNewSession();
                print('Generated new session ID: ${provider.sessionId}');
              }
              
              // Extra check to make sure we have a session ID
              if (provider.sessionId.isEmpty) {
                print('WARNING: Session ID is empty after generation attempt');
                // Manually generate a session ID as fallback
                final fallbackId = DateTime.now().millisecondsSinceEpoch.toString().substring(6);
                print('Using fallback session ID: $fallbackId');
                provider.setSessionId(fallbackId);
              }
              
              print('Connecting to session: ${provider.sessionId}');
              // Connect to the session
              provider.connectToSession();
              
              // Close dialog and update state
              Navigator.pop(context);
              setState(() => _showConnectDialog = false);
              
              print('=== Join process completed ===');
            } catch (e) {
              print('ERROR during join process: $e');
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text('Error joining chat: $e'),
                  backgroundColor: Colors.red,
                ),
              );
            }
          },
        ),
      ],
    );
  }
}
