// Methods needed for test panel

void appendDiagnostic(String s) {
  setState(() => diagnosticLogs.add(s));
  // scroll after a tiny delay to allow list to update
  Future.delayed(const Duration(milliseconds: 50), () {
    if (diagnosticController.hasClients) {
      diagnosticController.jumpTo(diagnosticController.position.maxScrollExtent);
    }
  });
}

void copyDiagnosticLogs() {
  final text = diagnosticLogs.join('\n');
  Clipboard.setData(ClipboardData(text: text));
  appendDiagnostic("[System] Logs copied to clipboard");
}

void clearDiagnosticLogs() {
  setState(() {
    diagnosticLogs.clear();
  });
  appendDiagnostic("[System] Logs cleared");
}

void toggleDiagnosticPanel() {
  setState(() {
    showDiagnosticPanel = !showDiagnosticPanel;
  });
  appendDiagnostic("[System] Diagnostic panel ${showDiagnosticPanel ? 'opened' : 'closed'}");
}

void testAudioInitialization() {
  appendDiagnostic("[Test] Testing audio initialization...");
  js.context.callMethod('eval', ['''
    try {
      if (!window.audioContext) {
        window.audioContext = new (window.AudioContext || window.webkitAudioContext)({sampleRate: 24000});
        window.audioQueue = [];
        window.isPlayingAudio = false;
        dartAppendTranscript("[Test] Created new AudioContext: " + window.audioContext.state);
      } else {
        dartAppendTranscript("[Test] AudioContext already exists: " + window.audioContext.state);
        if (window.audioContext.state !== "running") {
          window.audioContext.resume().then(() => {
            dartAppendTranscript("[Test] AudioContext resumed: " + window.audioContext.state);
          }).catch(err => {
            dartAppendTranscript("[Test] Failed to resume AudioContext: " + err.message);
          });
        }
      }
      
      // Test creating an audio node
      const testNode = window.audioContext.createGain();
      dartAppendTranscript("[Test] Successfully created audio node");
      
      // Additional state info
      dartAppendTranscript("[Test] Audio queue length: " + (window.audioQueue ? window.audioQueue.length : "undefined"));
      dartAppendTranscript("[Test] isPlayingAudio: " + (window.isPlayingAudio ? "true" : "false"));
    } catch (err) {
      dartAppendTranscript("[Test] Audio initialization error: " + err.message);
      console.error("Audio test error:", err);
    }
  ''']);
}

void testWebRTCConnection() {
  appendDiagnostic("[Test] Testing WebRTC connection...");
  js.context.callMethod('eval', ['''
    try {
      if (!window.peerConnection) {
        dartAppendTranscript("[Test] No WebRTC connection exists");
        return;
      }
      
      dartAppendTranscript("[Test] WebRTC connection state: " + window.peerConnection.connectionState);
      dartAppendTranscript("[Test] ICE connection state: " + window.peerConnection.iceConnectionState);
      dartAppendTranscript("[Test] Signaling state: " + window.peerConnection.signalingState);
      
      if (window.dataChannel) {
        dartAppendTranscript("[Test] Data channel state: " + window.dataChannel.readyState);
        
        // Test sending a message through data channel
        if (window.dataChannel.readyState === "open") {
          try {
            const testMsg = {type: "test_message", timestamp: new Date().toISOString()};
            window.dataChannel.send(JSON.stringify(testMsg));
            dartAppendTranscript("[Test] Test message sent through data channel");
          } catch (sendErr) {
            dartAppendTranscript("[Test] Failed to send test message: " + sendErr.message);
          }
        } else {
          dartAppendTranscript("[Test] Data channel not open, can't send test message");
        }
      } else {
        dartAppendTranscript("[Test] No data channel exists");
      }
    } catch (err) {
      dartAppendTranscript("[Test] WebRTC test error: " + err.message);
      console.error("WebRTC test error:", err);
    }
  ''']);
}

void testTTSSystem() {
  appendDiagnostic("[Test] Testing TTS functionality...");
  final testText = "This is a test of the text to speech system";
  
  // First try WebRTC TTS
  appendDiagnostic("[Test] Testing WebRTC TTS channel...");
  js.context.callMethod('eval', ['''
    try {
      if (window.sendTTS && typeof window.sendTTS === "function") {
        const result = window.sendTTS("${testText} via WebRTC");
        dartAppendTranscript("[Test] WebRTC TTS send result: " + (result ? "success" : "failed"));
      } else {
        dartAppendTranscript("[Test] WebRTC TTS function not available");
      }
    } catch (err) {
      dartAppendTranscript("[Test] WebRTC TTS test error: " + err.message);
      console.error("WebRTC TTS test error:", err);
    }
  ''']);
  
  // Then try direct TTS
  Future.delayed(const Duration(seconds: 2), () {
    appendDiagnostic("[Test] Testing direct HTTP TTS...");
    useDirectTTS("$testText via HTTP");
  });
}

// UI code for test panel
if (showDiagnosticPanel)
  Container(
    height: 300,
    padding: const EdgeInsets.all(16),
    color: Colors.grey[200],
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
              decoration: BoxDecoration(
                color: Colors.green[700],
                borderRadius: BorderRadius.circular(4),
              ),
              child: const Text(
                'Diagnostic Test Panel',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
            ),
            Row(
              children: [
                ElevatedButton.icon(
                  onPressed: clearDiagnosticLogs,
                  icon: const Icon(Icons.clear_all),
                  label: const Text('Clear Logs'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.orange,
                    foregroundColor: Colors.white,
                  ),
                ),
                const SizedBox(width: 8),
                ElevatedButton.icon(
                  onPressed: copyDiagnosticLogs,
                  icon: const Icon(Icons.copy),
                  label: const Text('Copy Logs'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.blue,
                    foregroundColor: Colors.white,
                  ),
                ),
              ],
            ),
          ],
        ),
        const SizedBox(height: 8),
        Row(
          children: [
            ElevatedButton.icon(
              onPressed: testAudioInitialization,
              icon: const Icon(Icons.speaker),
              label: const Text('Test Audio Init'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.purple,
                foregroundColor: Colors.white,
              ),
            ),
            const SizedBox(width: 8),
            ElevatedButton.icon(
              onPressed: testWebRTCConnection,
              icon: const Icon(Icons.connect_without_contact),
              label: const Text('Test WebRTC'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.indigo,
                foregroundColor: Colors.white,
              ),
            ),
            const SizedBox(width: 8),
            ElevatedButton.icon(
              onPressed: testTTSSystem,
              icon: const Icon(Icons.record_voice_over),
              label: const Text('Test TTS'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.teal,
                foregroundColor: Colors.white,
              ),
            ),
            const SizedBox(width: 8),
            ElevatedButton.icon(
              onPressed: playTestSound,
              icon: const Icon(Icons.volume_up),
              label: const Text('Test Sound'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blue,
                foregroundColor: Colors.white,
              ),
            ),
          ],
        ),
        const SizedBox(height: 8),
        Expanded(
          child: Container(
            padding: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: Colors.black87,
              borderRadius: BorderRadius.circular(4),
            ),
            child: ListView.builder(
              controller: diagnosticController,
              itemCount: diagnosticLogs.length,
              itemBuilder: (context, index) {
                final log = diagnosticLogs[index];
                Color textColor = Colors.white;
                if (log.contains("[Test]")) {
                  textColor = Colors.yellow;
                } else if (log.contains("[error]")) {
                  textColor = Colors.red;
                } else if (log.contains("[audio]")) {
                  textColor = Colors.cyan;
                } else if (log.contains("[system]") || log.contains("[System]")) {
                  textColor = Colors.green;
                }
                
                return Padding(
                  padding: const EdgeInsets.symmetric(vertical: 2),
                  child: Text(
                    log,
                    style: TextStyle(
                      fontFamily: 'monospace',
                      fontSize: 12,
                      color: textColor,
                    ),
                  ),
                );
              },
            ),
          ),
        ),
      ],
    ),
  ),
